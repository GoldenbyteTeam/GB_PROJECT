# Generated by Django 4.1.3 on 2023-05-10 15:54

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import smart_selects.db_fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalogue', '0001_initial'),
        ('opmode', '0001_initial'),
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('environment', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Command',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('refurl_1', models.URLField(blank=True)),
                ('refurl_2', models.URLField(blank=True)),
                ('refurl_3', models.URLField(blank=True)),
                ('refurl_4', models.URLField(blank=True)),
                ('refurl_5', models.URLField(blank=True)),
                ('cmd_date', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('is_published', models.BooleanField(default=False)),
                ('catalogue', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catalogue.catalogue')),
                ('environment', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='catalogue', chained_model_field='catalogue', on_delete=django.db.models.deletion.DO_NOTHING, to='environment.environment')),
                ('opmode', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='environment', chained_model_field='environment', on_delete=django.db.models.deletion.DO_NOTHING, to='opmode.opmode')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
    ]
